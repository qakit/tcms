@page "/manage/products/edit/{productId:int}"
@using Microsoft.EntityFrameworkCore
@using Data
@using Data.Models

@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject IDbContextFactory<ApplicationDbContext> dbFactory

@attribute [Authorize(Policy = Constants.Permissions.Admin.ManageProducts)]

<MudText Typo="Typo.h3">Edit</MudText>
<EditForm Model="@product" OnValidSubmit="@(() => ApplyChanges(true))">
	<DataAnnotationsValidator />
	<MudItem xs="12" md="6">
		<MudTextField For="@(() => product.Name)" @bind-Value="@product.Name" Required="true" Label="Name" />
	</MudItem>
	<MudItem xs="12" md="6">
		<MudTextField For="@(() => product.Description)" @bind-Value="@product.Description" Required="true" Label="Description" />
	</MudItem>
	<p>&nbsp;</p>

	<MudExpansionPanels>
		<MudExpansionPanel HideIcon="true" @bind-IsExpanded="isVersionsOpen" Style="@expansionBackColor">
			<TitleContent>
				<div class="d-flex">
					<MudText Class="mt-1">Product Versions</MudText>
					<MudBadge Content="@product.Versions?.Count" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
						<MudIcon Icon="@Icons.Material.Filled.Restore" Color="Color.Default" />
					</MudBadge>
				</div>
			</TitleContent>
			<ChildContent>
				<ProductVersionList Items="@product.Versions" OnDeleteVersion="@OnDeleteVersion" />
			</ChildContent>
		</MudExpansionPanel>
		<MudExpansionPanel HideIcon="true" Style="@expansionBackColor">
			<TitleContent>
				<div class="d-flex">
					<MudText Class="mt-1">Components</MudText>
					<MudBadge Content="@product.Components?.Count" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
						<MudIcon Icon="@Icons.Material.Filled.ViewList" Color="Color.Default" />
					</MudBadge>
				</div>
			</TitleContent>
			<ChildContent>
				<ComponentList Items="@product.Components" OnDeleteComponent="@OnDeleteComponent" />
			</ChildContent>
		</MudExpansionPanel>
	</MudExpansionPanels>

	<MudToolBar>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(() => ApplyChanges(false))">Apply changes</MudButton>
		<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update</MudButton>
		<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick=@Back>Back</MudButton>
	</MudToolBar>
</EditForm>

@code {
	[Parameter] public int productId { get; set; }
	Product product = new Product();
	ApplicationDbContext _context;

	bool isVersionsOpen = true;
	string expansionBackColor = $"background-color:{Colors.Grey.Lighten4};";

	protected async override Task OnParametersSetAsync()
	{
		_context = dbFactory.CreateDbContext();
		product = await _context.Products
			.Include(p => p.Versions)
			.Include(p => p.Components)
			.FirstOrDefaultAsync(p => p.ProductId == productId);
	}

	async Task Back() {
		await js.InvokeVoidAsync("history.back");
	}
	
	async Task ApplyChanges(bool navigateAway = false)
	{
		_context.Entry(product).State = EntityState.Modified;
		try {
			await _context.SaveChangesAsync();
			_snackBar.Add($"{product.Name} updated successfully", Severity.Success);
			if (navigateAway) uriHelper.NavigateTo("manage/products");
		}
		catch(DbUpdateException updError)
		{
			_snackBar.Add($"Failed to store data: {updError.InnerException.Message}", Severity.Error);
		}
	}

	void OnDeleteVersion(ProductVersion pv)
	{
		_context.Entry(pv).State = EntityState.Deleted;
	}
	void OnDeleteComponent(Component comp)
	{
		_context.Entry(comp).State = EntityState.Deleted;
	}
	public void Dispose()
	{
		_context.Dispose();
	}
}
