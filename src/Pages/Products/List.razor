@page "/manage/products"

@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Data.Models

@inject IJSRuntime js

@inject Microsoft.AspNetCore.Components.NavigationManager navManager
@inject IDbContextFactory<Data.ApplicationDbContext> dbFactory

@attribute [Authorize(Policy = Constants.Permissions.Admin.ManageProducts)]

@if (products == null)
{
	<text>Loading...</text>
}
else if (products.Count == 0)
{
	<text>No Records Found.</text>
}
else
{
	<MudTable Items="@products" Dense="true" Striped="true" Filter="new Func<Product, bool>(Search)">
		<ToolBarContent>
			<MudButton Variant="Variant.Filled" OnClick="@(() => CreateNew())">Create New</MudButton>
			<MudToolBarSpacer />
			<MudTextField @bind-Value="@searchString" Placeholder="Search for products" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh><MudTableSortLabel SortBy="new Func<Product, object>(x=>x.ProductId)">Id</MudTableSortLabel></MudTh>
			<MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Product, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
			<MudTh>Description</MudTh>
			<MudTh>Command</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Id">@context.ProductId</MudTd>
			<MudTd DataLabel="Name">@context.Name</MudTd>
			<MudTd DataLabel="Description">@context.Description</MudTd>
			<MudTd>
				<MudToolBar Dense="true">
					<MudButton Color="Color.Inherit" OnClick="@(() => Edit(@context.ProductId))">Edit</MudButton>
					<MudButton Color="Color.Inherit" OnClick="@(() => Delete(@context.ProductId))">Delete</MudButton>
				</MudToolBar>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[]{50, 100}" />
		</PagerContent>
	</MudTable>
}

@code {
	IList<Product> products { get; set; }
	string searchString { get; set; }

	protected override async Task OnInitializedAsync()
	{
		using var db = dbFactory.CreateDbContext();
		products = await db.Products.ToListAsync();
	}

	private bool Search(Product product)
	{
		if (string.IsNullOrWhiteSpace(searchString)) return true;
		return product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
			|| product.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)
		;
	}

	async Task Delete(int productId)
	{
		using var db = dbFactory.CreateDbContext();
		var product = products.First(x => x.ProductId == productId);
		if (!await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.Name}'s ({product.ProductId}) Record?")) return;
		
		try {
			db.Remove(product);
			await db.SaveChangesAsync();
			await OnInitializedAsync();
		}
		catch(DbUpdateException updError)
		{
			_snackBar.Add($"Failed to delete product: {updError.InnerException.Message}", Severity.Error);
		}
	}

	void Edit(int productId)
	{
		navManager.NavigateTo($"manage/products/edit/{productId}");
	}

	void CreateNew()
	{
		navManager.NavigateTo($"manage/products/create");
	}
}
