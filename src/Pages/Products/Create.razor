@page "/products/create"
@using Microsoft.EntityFrameworkCore
@using Data.Models

@inject NavigationManager uriHelper
@inject IDbContextFactory<Data.ApplicationDbContext> dbFactory

@inject IJSRuntime js
@attribute [Authorize(Policy = Constants.Permissions.Admin.ManageProducts)]

<h3>Create</h3>

<EditForm Model="@product" OnValidSubmit="@CreateProduct">
	<DataAnnotationsValidator />

	<MudCard Style="padding: 8pt">
		<MudCardContent>
			<MudItem xs="12" md="6">
				<MudTextField For="@(() => product.Name)" @bind-Value="@product.Name" Required="true" Label="Name" />
			</MudItem>
			<MudItem xs="12" md="6">
				<MudTextField For="@(() => product.Description)" @bind-Value="@product.Description" Required="true" Label="Description" />
			</MudItem>
		</MudCardContent>

		<MudCardActions>
			<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create product</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick=@Back>Back</MudButton>
		</MudCardActions>
	</MudCard>
</EditForm>

@code {
	Product product = new Product { Versions = new HashSet<ProductVersion>(), Components = new HashSet<Component>() };

    async Task Back() {
        await js.InvokeVoidAsync("history.back");
    }

	async Task CreateProduct()
	{
		try
		{
			using var db = dbFactory.CreateDbContext();
			db.Add(product);
			await db.SaveChangesAsync();
			_snackBar.Add($"{product.Name} created successfully", Severity.Success);
			uriHelper.NavigateTo("products");
		}
		catch(DbUpdateException updError)
		{
			_snackBar.Add($"Failed to update product: {updError.InnerException.Message}", Severity.Error);
		}

	}
}