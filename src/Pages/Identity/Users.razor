@page "/identity/users"

@using Constants
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@using MudBlazor

@inject IJSRuntime js
@inject UserManager<IdentityUser> _userManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<Roles> localizer
@inject Microsoft.AspNetCore.Components.NavigationManager _navigationManager

@attribute [Authorize(Policy = Constants.Permissions.Admin.ManageUsers)]

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">@localizer["Users"]</MudText>
<MudText Color="Color.Surface" Class="mb-4">@localizer["Manage users."]</MudText>

<MudTable Hover="true" Elevation="25" Items="UserList" Filter="new Func<IdentityUser, bool>(Search)">
	<ToolBarContent>
		<div class="justify-center mud-text-align-center">
			@* <MudButton Variant="Variant.Filled" OnClick="(()=>InvokeModal())">@localizer["Create"]</MudButton> *@
			<MudButton Variant="Variant.Filled" OnClick="GetUsersAsync">@localizer["Reload"]</MudButton>
		</div>

		<MudToolBarSpacer />
		<MudTextField @bind-Value="searchString" Placeholder="Search for users..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh Style="text-align:right">Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Role">@context.UserName</MudTd>
		<MudTd DataLabel="Actions" Style="text-align:right">
			@if(@context.UserName != Constants.UserRoleConstants.AdministratorRole)
			{
				<MudMenu Label="..." Variant="Variant.Filled" DisableElevation="true" IconColor="Color.Secondary" Direction="Direction.Right">
					<MudMenuItem @onclick="@(()=>ManageRoles(@context.Id))">View Roles</MudMenuItem>
					<MudMenuItem @onclick="@(()=>Delete(@context.Id))">Delete</MudMenuItem>
				</MudMenu>
			}
		</MudTd>
	</RowTemplate>
</MudTable>

@code {
	public List<IdentityUser> UserList = new List<IdentityUser>();
	private string searchString = "";

	protected override async Task OnInitializedAsync()
	{
		await GetUsersAsync();
	}

	private async Task GetUsersAsync()
	{
		UserList = await _userManager.Users.ToListAsync();
	}

	private bool Search(IdentityUser user)
	{
		if (string.IsNullOrWhiteSpace(searchString)) return true;
		if (user.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
		{
			return true;
		}
		return false;
	}

	private async Task Delete(string id)
	{
		var user = await _userManager.FindByIdAsync(id);
		if (user.UserName == UserRoleConstants.Administrator)
		{
			_snackBar.Add("Cannot delete built-in user", Severity.Error);
			return;
		}
		if (user == null || !await js.InvokeAsync<bool>("confirm", $"Do you want to delete ({user.UserName}) user?")) return;

		try {
			await _userManager.DeleteAsync(user);
			await OnInitializedAsync();
            _snackBar.Add($"User {user.UserName} deleted", Severity.Success);
		}
		catch(DbUpdateException updError)
		{
			_snackBar.Add($"Failed to delete user: {updError.InnerException.Message}", Severity.Error);
		}
	}

	private void ManageRoles(string userId)
	{
		_navigationManager.NavigateTo($"/identity/users/{userId}/roles");
	}
}
