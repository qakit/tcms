@page "/identity/roles"

@using Constants
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@using MudBlazor

@inject IJSRuntime js
@inject RoleManager<IdentityRole> _roleManager
@inject Microsoft.Extensions.Localization.IStringLocalizer<Roles> localizer
@inject Microsoft.AspNetCore.Components.NavigationManager _navigationManager

@attribute [Authorize(Policy = Constants.Permissions.Admin.ManageUsers)]

@* <HeroTitle Title="@localizer["Roles"]" Description="@localizer["Manage Roles."]" /> *@
<MudTable Hover="true" Elevation="25" Items="RoleList" Filter="new Func<IdentityRole, bool>(Search)">
	<ToolBarContent>
		<div class="justify-center mud-text-align-center">
			<MudButton Variant="Variant.Filled" OnClick="(()=>InvokeModal())">@localizer["Create"]</MudButton>
			<MudButton Variant="Variant.Filled" OnClick="GetRolesAsync">@localizer["Reload"]</MudButton>
		</div>

		<MudToolBarSpacer />
		<MudTextField @bind-Value="searchString" Placeholder="Search for Roles..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Role</MudTh>
		<MudTh Style="text-align:right">Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Role">@context.Name</MudTd>
		<MudTd DataLabel="Actions" Style="text-align:right">
			@if(@context.Name != Constants.UserRoleConstants.AdministratorRole)
			{
				<MudMenu Label="..." Variant="Variant.Filled" DisableElevation="true" IconColor="Color.Secondary" Direction="Direction.Right">
					<MudMenuItem @onclick="@(()=>ManagePermissions(@context.Id))">Manage Permissions</MudMenuItem>
					<MudMenuItem @onclick="@(()=>InvokeModal(@context.Id))">Edit</MudMenuItem>
					<MudMenuItem @onclick="@(()=>Delete(@context.Id))">Delete</MudMenuItem>
				</MudMenu>
			}
		</MudTd>
	</RowTemplate>
</MudTable>

@code {
	public List<IdentityRole> RoleList = new List<IdentityRole>();
	private string searchString = "";

	protected override async Task OnInitializedAsync()
	{
		await GetRolesAsync();
	}

	private async Task GetRolesAsync()
	{
		RoleList = await _roleManager.Roles.ToListAsync();
	}

	private bool Search(IdentityRole role)
	{
		if (string.IsNullOrWhiteSpace(searchString)) return true;
		if (role.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
		{
			return true;
		}
		return false;
	}

	private async Task InvokeModal(string id = null)
	{
		var parameters = new DialogParameters();
		if (id != null)
		{
			var role = RoleList.FirstOrDefault(c => c.Id == id);
			parameters.Add("Id", role.Id);
			parameters.Add("Name", role.Name);
		}
		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
		var dialog = _dialogService.Show<RoleModal>("Modal", parameters, options);
		var result = await dialog.Result;
		if (!result.Cancelled)
		{
			await GetRolesAsync();
		}
	}

	private async Task Delete(string id)
	{
		var role = await _roleManager.FindByIdAsync(id);
		if (role.Name == UserRoleConstants.AdministratorRole)
		{
			_snackBar.Add("Cannot delete built-in role", Severity.Error);
			return;
		}
		if (role == null || !await js.InvokeAsync<bool>("confirm", $"Do you want to delete ({role.Name}) Role?")) return;

		try {
			await _roleManager.DeleteAsync(role);
			await OnInitializedAsync();
		}
		catch(DbUpdateException updError)
		{
			_snackBar.Add($"Failed to delete role: {updError.InnerException.Message}", Severity.Error);
		}
	}

	private void ManagePermissions(string roleId)
	{
		_navigationManager.NavigateTo($"/identity/roles/{roleId}/permissions");
	}
}
