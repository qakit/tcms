@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Constants
@using Data.Models

@inject IDbContextFactory<Data.ApplicationDbContext> dbFactory
@inject ClaimsPrincipal User

<MudNavMenu>
    <MudText Typo="Typo.h6" Class="px-4">TCMS</MudText>
    <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Test cases management</MudText>
    <MudDivider Class="my-2"/>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Home</MudNavLink>
    @if (_authorizationService.AuthorizeAsync(User, Permissions.Admin.ManageProducts).Result.Succeeded)
    {
        <MudNavLink Href="manage/products" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Products</MudNavLink>
    }
    <MudNavGroup Title="Test cases" Icon="@Icons.Material.Outlined.LibraryBooks">
        @if (products == null)
        {
            <text>Loading...</text>
        }
        else if (products.Count == 0)
        {
            <text>No products found. Please go to products to configure one.</text>
        } else {
            @foreach (var product in products)
            {
                <MudNavLink Href=@($"products/{product.ProductId}/testcases") Icon="@Icons.Filled.Receipt">@product.Name</MudNavLink>
            }
        }
    </MudNavGroup>

    @if (_authorizationService.AuthorizeAsync(User, PolicyNames.AnyAdminPrivilege).Result.Succeeded)
    {
        <MudListSubheader Class="mt-2 mb-n2">
            Administrator
        </MudListSubheader>
    }
    @if (_authorizationService.AuthorizeAsync(User, Permissions.Admin.ManageUsers).Result.Succeeded)
    {
        <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.Person">Roles</MudNavLink>
        <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Face">Users</MudNavLink>
    }

</MudNavMenu>

@code {
	IList<Product> products { get; set; }
	string searchString { get; set; }

	protected override async Task OnInitializedAsync()
	{
		using var db = dbFactory.CreateDbContext();
		products = await db.Products.ToListAsync();
	}
}